{"version":3,"sources":["components/Image360.js","components/ImageForm.js","App.js","serviceWorker.js","index.js"],"names":["Image360","_ref","match","src","decodeURIComponent","params","react_default","a","createElement","Container","dist","primitive","id","look-controls","reverseMouseDrag","concat","styled","div","_templateObject","ImageForm","state","imageURL","_this2","this","className","Form","Input","key","size","inverted","placeholder","value","onChange","e","data","setState","action","Button","as","Link","to","encodeURIComponent","color","width","alt","aria-label","Component","App","Fragment","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6cAOe,IAAAA,EAAA,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACVC,EAAMC,mBAAmBF,EAAMG,OAAOF,KAC5C,OACEG,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,MAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,UAAU,WACVC,GAAG,SACHC,gBAAe,CAAEC,kBAAkB,IAEnCR,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQC,UAAU,cAEpBL,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,UAAU,QACVR,IAAG,uCAAAY,OAAyCZ,QAOhDM,EAAYO,IAAOC,IAAVC,yCCxBMC,6MACnBC,MAAQ,CACNC,SAAU,4EAGH,IAAAC,EAAAC,KACP,OACEjB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAAA,UAAQgB,UAAU,cAChBlB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEC,IAAI,kBACJC,KAAK,QACLC,UAAQ,EACRC,YAAY,cACZC,MAAOR,KAAKH,MAAMC,SAClBW,SAAU,SAACC,EAAGC,GAAJ,OAAaZ,EAAKa,SAAS,CAAEd,SAAUa,EAAKH,SACtDK,OACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,GAAIC,IACJC,GAAE,QAAAzB,OAAU0B,mBAAmBlB,KAAKH,MAAMC,WAC1CqB,MAAM,QAHR,iBAUNpC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OACEmC,MAAM,MACNxC,IAAKoB,KAAKH,MAAMC,SAChBuB,IAAI,oBACJC,aAAW,uBAlCgBC,aCaxBC,mLATX,OACEzC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACE1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjC,IACjCb,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,KAAK,YAAYE,UAAWpD,YALzB8C,aCIEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStD,MACvB,wECTNuD,IAASC,OACPpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAeC,SAAUC,2CACvBvD,EAAAC,EAAAC,cAACsD,EAAD,OAEFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9fb6f1a4.chunk.js","sourcesContent":["import 'aframe';\n\nimport React from 'react';\n\nimport { Entity, Scene } from 'aframe-react';\nimport styled from 'styled-components';\n\nexport default ({ match }) => {\n  const src = decodeURIComponent(match.params.src);\n  return (\n    <Container>\n      <Scene>\n        <Entity\n          primitive=\"a-camera\"\n          id=\"camera\"\n          look-controls={{ reverseMouseDrag: true }}\n        >\n          <Entity primitive=\"a-cursor\" />\n        </Entity>\n        <Entity\n          primitive=\"a-sky\"\n          src={`https://cors-anywhere.herokuapp.com/${src}`}\n        />\n      </Scene>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  background: black;\n  color: white;\n`;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Form } from 'semantic-ui-react';\n\nexport default class ImageForm extends Component {\n  state = {\n    imageURL: ''\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>360 Image Viewer</h1>\n          <Form>\n            <Input\n              key=\"image-url-input\"\n              size=\"large\"\n              inverted\n              placeholder=\"https://...\"\n              value={this.state.imageURL}\n              onChange={(e, data) => this.setState({ imageURL: data.value })}\n              action={\n                <Button\n                  as={Link}\n                  to={`/360/${encodeURIComponent(this.state.imageURL)}`}\n                  color=\"blue\"\n                >\n                  View Image\n                </Button>\n              }\n            />\n          </Form>\n          <h3>Image Preview:</h3>\n          <img\n            width=\"200\"\n            src={this.state.imageURL}\n            alt=\"Not a valid image\"\n            aria-label=\"360 Image\"\n          />\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Route, Link, Router } from 'react-router-dom';\nimport Image360 from './components/Image360';\nimport ImageForm from './components/ImageForm';\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Route path=\"/\" exact component={ImageForm} />\n        <Route path=\"/360/:src\" component={Image360} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}